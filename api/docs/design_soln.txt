Your understanding of the current problem and the need for redesign is accurate. The shift from a fixed number of filters per rule to a variable number (1 to n) and the realization that multiple operation types can be present within a single rule indeed necessitates a change in approach.

Given the requirements, a combination of design patterns could be beneficial:

Strategy Pattern: This could be used for different filter operations (value_date, expression, perf_ref, etc.). Each operation type could be encapsulated in its own strategy class.

Composite Pattern: This could help in managing the hierarchical structure of rules and their filters. Each rule could be composed of multiple filters, and each filter could have multiple operations.

Factory Method Pattern: This could be used to create the appropriate filter operation objects based on the parsed field data.

Observer Pattern: This could be useful for managing dependencies between filter operations across different filters within the same rule.

Chain of Responsibility: This could be used to process the filters in a sequential manner, passing the result from one filter to the next.

Builder Pattern: This could be used to construct complex Rule objects with multiple filters and operations.

By combining these patterns, we can create a flexible and extensible system that can handle rules with varying numbers of filters and multiple operation types within each filter. This approach would allow for easier addition of new filter operation types in the future and better management of inter-filter dependencies.