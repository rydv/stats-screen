Generalized Summary of Application Functionality
Our application processes a set of rules provided in a rule sheet to identify and validate transactions based on specific criteria. Here is a summary of the applicationâ€™s functionality:

For reprots, user will upload a rule sheet with the following columns:

CSV File Structure
The CSV file should contain the following fields:

Common Fields
rule_id: Unique identifier for the rule.
category_code: Category code associated with the rule.
set_id: Identifier for the set to which the rule belongs.
or_and_flag: Logical operator if multiple matching conditions provided (AND/OR).
value_date_flag: Indicates if the rule involves value date matching (Y/N).
amount_flag: Indicates if the rule involves amount matching (Y/N).

Individual Leg Information (Leg-1 and Leg-2)
ls_flag: Indicates whether the leg refers to ledger (L) or statement (S).
dc_flag: Indicates whether the leg refers to debit (D) or credit (C).
ref1: Pattern to match against the first reference field in the transaction data.
ref2: Pattern to match against the second reference field.
ref3: Pattern to match against the third reference field.
ref4: Pattern to match against the fourth reference field.
string1 to string30: Additional fields to provide specific matching patterns.


User uploads a CSV file containing a list of rules.
Parse Fields:

The application reads each rule and parses the fields to identify the sequence of identifiers and their corresponding values.
Generate Search Expressions:

The application constructs regex patterns based on the parsed identifiers to create search aggregation expressions.
Apply Filters:

Filters are applied to transactions using the generated regex patterns to find matches.
Extract and Compare Values:

The application extracts values from the matched transactions and compares them if required by the rule.
Perform Operations:

Any specified operations (e.g., replacements) are performed on the extracted values.
Aggregate Results:

The matched transactions are grouped and aggregated based on specific criteria.
Return Processed Results:

The application returns the final results, including matched transactions and any additional calculated fields.
This summary outlines the generalized steps taken by the application to process rules and validate transactions, ensuring a flexible and accurate approach to data matching and extraction.




Accept Rule Sheet:

The application accepts a CSV file (rule sheet) containing multiple rules to be processed.
Parse Fields:

Each rule in the rule sheet contains fields with values structured as a sequence of identifiers (e.g., EXACT, EXP, DT_FRMT, OP).
The application parses these fields to extract the exact values, expressions, date formats, and operations.
Generate Search Expressions:

Based on the parsed identifiers, the application generates regular expressions (regex) to be used for matching transactions.
These regex patterns are used to create search aggregation expressions for each rule.
Apply Filters:

The application applies the generated search expressions to filter transactions.
Multiple filters may be applied to a single rule, each targeting different transaction attributes.
Extract and Compare Values:

The application extracts values from the matched transactions using capturing groups in the expressions.
If specified, the application compares the extracted values from different filters to validate the transactions.
Perform Operations:

If the rule includes operations (e.g., replacing characters), the application performs these operations on the extracted values.
Aggregate Results:

The application groups the matched transactions based on specific criteria (e.g., RELATIONSHIP_ID).
It aggregates the results, applying necessary calculations such as summing values.
Return Processed Results:

The application returns the final list of matched and processed transactions.
Additional fields such as concatenated matched values and fetched value dates are included in the output.
Detailed Workflow
Accept Rule Sheet:




Rule Sheet Structure Documentation
This document outlines the structure and requirements for the CSV file containing the list of rules to be processed by the application. The rule sheet must follow the specified format to ensure accurate processing and validation of rules.



Rule Processing Logic
Overview
The rule processing logic involves interpreting structured expressions provided in the reference fields of each rule. These expressions dictate conditions that transactions must satisfy for the rule to be considered valid. Each expression is parsed using specific identifiers and values to form criteria for matching transactions.

Identifiers and Definitions
|EXACT|<exact value>: Specifies an exact string that must be present in the transaction data.
|EXP|<expression>: Defines a regular expression pattern that the transaction data must match.
|EXP|(...): Encloses an expression within parentheses, indicating that the matched value from this expression will be compared with a similar matched value from another filter.
|DT_FRMT|<date format>: Indicates that the preceding expression represents a date formatted according to the specified format.
|OP|<operation details>: Specifies an operation to perform on the matched value retrieved from the transaction data.
|OP|REP|:||: Defines a replace operation that replaces specified characters with an empty string in the matched value.
Examples
Example-1: FILTER-1

css
Copy code
value: |EXACT|FX|EXP|\d{9}
FILTER-2

css
Copy code
value: |EXACT|MX|EXP|\d{9}
Note: In this example, the expression values are not wrapped in (), indicating that matched values will not be compared between FILTER-1 and FILTER-2.

Valid Matches

FILTER-1 MATCHES: FX345674674
FILTER-2 MATCHES: MX445674645
Example-2: FILTER-1

css
Copy code
value: |EXACT|FX|EXP|(\d{9})
FILTER-2

css
Copy code
value: |EXACT|MX|EXP|(\d{9})
Note: Here, the expression values are wrapped in (), indicating that the matched values from FILTER-1 will be compared with those from FILTER-2.

Valid Matches

FILTER-1 MATCHES: FX345674674
FILTER-2 MATCHES: MX345674674
This documentation provides a comprehensive explanation of how structured expressions in rule sheets are processed to define criteria for transaction matching. It illustrates the use of identifiers and includes examples to clarify their application in determining valid matches for rules.

Identifiers and Definitions Examples
|EXACT|<exact value>

Description: Specifies an exact string that must be present in the transaction data.
Example: |EXACT|FX
Explanation: This rule matches transactions containing the exact string "FX".
|EXP|<expression>

Description: Defines a regular expression pattern that the transaction data must match.
Example: |EXP|\d{9}
Explanation: This rule matches transactions where a sequence of nine digits (\d{9}) is found.
|EXP|(...)

Description: Encloses an expression within parentheses, indicating that the matched value from this expression will be compared with a similar matched value from another filter.
Example: |EXP|(\d{9})
Explanation: This rule captures the matched value from the expression (\d{9}), which will be compared with a similar matched value from another filter.
|DT_FRMT|<date format>

Description: Indicates that the preceding expression represents a date formatted according to the specified format.
Example: |DT_FRMT|YYYY-MM-DD
Explanation: This rule expects the preceding expression to be a date formatted as YYYY-MM-DD.
|OP|<operation details>

Description: Specifies an operation to perform on the matched value retrieved from the transaction data. In this case, it defines a replace operation that replaces specified characters with an empty string in the matched value.
Example: |OP|REP|:||
Explanation: This rule performs a replace operation on the matched value, replacing ':' with an empty string.
These examples and explanations demonstrate how each identifier is used within a rule sheet to define specific conditions that transactions must meet for a rule to be considered valid.


