# Entry point for every rule through api/controller/utils/process.py
# Iterates through rows in @api/docs/sample_sheet.csv

# First leg of each rule:
    # CSV file is read and data is loaded into memory.
    # Common rule parameters are initialized using common fields (structure defined in @rule_params.py).
    # Field values are parsed using the Field class from api/controller/modules/field.py:
        # Field objects are created for each ref column in the CSV.
        # The _extract_id method is called to extract any ID information.
        # The _parse_value method is called to process the field value:
            # It splits the value based on identifiers (|EXACT|, |EXP|, |FRMT|, |OP|, |PerfRef|).
            # For each identifier, the appropriate strategy is used to parse the content.
            # Flags (exp_flag, valdt_flag, op_flag, perf_ref_flag) are set based on the identifiers found.
            # Parsed values and parameters are stored in the Field object.
        # The _create_search_agg_exp method is called to create a search pattern if needed.
    # Rules are identified based on the parsed field values and flags.
    # Respective rule parameters are captured and stored for each identified rule.
    # The rule type is identified using the identify_rule_type function, which checks the flags set in each Field object of the reference fields.
    # Common information is extracted and stored for use in both legs of the rule.

# Second leg of each rule:
    # Common information already fetched is reused.
    # Reference fields are parsed directly using the Field class.
    # The parsing process is similar to the first leg but focuses on rule-specific information.

# Rule processing:
    # Based on the identified rule type, the appropriate rule class (PerfRefRule, ValdtRule, or ExpRule) is instantiated with the rule parameters, l_s, d_c, and fields.
    # The rule object is initialized with these parameters, setting up the necessary attributes and data structures for further processing.
    # The find_matches method is called on the initialized rule object to process the rule and find matching records.

# Additional processing:
    # Error handling and logging are implemented throughout the process.
    # Performance optimizations are applied to handle large datasets efficiently.
    # Results from rule processing are collected and prepared for output or further analysis.
